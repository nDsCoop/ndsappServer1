{"version":3,"sources":["images/google.svg","../node_modules/@material-ui/core/esm/DialogContentText/DialogContentText.js","components/GoogleSignIn.js","components/LoginPage.js"],"names":["module","exports","DialogContentText","React","props","ref","Typography","_extends","component","variant","color","withStyles","root","marginBottom","name","gapi","window","GoogleSignIn","useState","open","setOpen","useEffect","updateSigninStatus","isSignedIn","console","log","setIsSignedIn","client","setApiKey","load","then","youtube","videos","list","part","myRating","response","err","error","auth2","getAuthInstance","currentUser","get","getAuthResponse","id_token","init","clientId","scope","listen","setTimeout","handleClose","localStorage","setItem","Dialog","onClose","DialogTitle","id","DialogContent","DialogActions","Button","onClick","event","signOut","signIn","src","gIcon","height","alt","style","marginRight","LoginPage","continueToHome","Hero","Grid","container","direction","justify","alignItems","getItem","showSignIn","Banner","title","subtitle","to","className"],"mappings":"6FAAAA,EAAOC,QAAU,IAA0B,oC,4JCWvCC,EAAiCC,cAAiB,SAA2BC,EAAOC,GACtF,OAAoBF,gBAAoBG,IAAYC,YAAS,CAC3DC,UAAW,IACXC,QAAS,QACTC,MAAO,gBACPL,IAAKA,GACJD,OAmBUO,cA/BK,CAElBC,KAAM,CACJC,aAAc,KA4BgB,CAChCC,KAAM,wBADOH,CAEZT,G,oCCxBGa,EAAOC,OAAOD,KAqILE,EAlIM,WAAO,IAAD,EACDd,IAAMe,UAAS,GADd,mBAClBC,EADkB,KACZC,EADY,KAGzBC,qBAAU,WACR,SAASC,EAAmBC,GACtBA,GACFC,QAAQC,IAAI,aACZC,GAAc,GAEdN,GAAQ,GAmCZL,EAAKY,OAAOC,UAAU,2CACfb,EAAKY,OACTE,KAAK,gEACLC,MACC,WACEN,QAAQC,IAAI,8BACZV,EAAKY,OAAOI,QAAQC,OACjBC,KAAK,CACJC,KAAM,UACNC,SAAU,SAEXL,MAAK,SAAAM,GACJZ,QAAQC,IAAIW,SAGlB,SAASC,GACPb,QAAQc,MAAM,oCAAqCD,MAjDrDb,QAAQC,IACNV,EAAKwB,MACFC,kBACAC,YAAYC,MACZC,kBAAkBC,YAGvBpB,QAAQC,IAAI,cACZC,GAAc,IAIlBX,EAAKc,KAAK,gBAAgB,WACxBd,EAAKY,OACFkB,KAAK,CACJC,SA/BM,2EAgCNC,MAAO,qDAERjB,MAAK,WAEJf,EAAKwB,MAAMC,kBAAkBjB,WAAWyB,OAAO1B,GAE/CA,EAAmBP,EAAKwB,MAAMC,kBAAkBjB,WAAWmB,aAIjEO,YAAW,WACT7B,GAAQ,KACP,OAEF,IAzCsB,MAsEWF,oBAAS,GAtEpB,mBAsElBK,EAtEkB,KAsENG,EAtEM,KA4FzB,SAASwB,IAEPC,aAAaC,QAAQ,gBAAgB,GACrChC,GAAQ,GAIV,OACE,6BACE,kBAACiC,EAAA,EAAD,CAAQlC,KAAMA,EAAMmC,QAASJ,GAC3B,kBAACK,EAAA,EAAD,CAAaC,GAAG,sBAAhB,sCAGA,kBAACC,EAAA,EAAD,KACE,kBAAC,EAAD,CAAmBD,GAAG,4BAAtB,uHAKF,kBAACE,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQlD,QAAQ,WAAWmD,QAASV,EAAaxC,MAAM,WAAvD,SAGA,kBAACiD,EAAA,EAAD,CAAQlD,QAAQ,WAAWC,MAAM,UAAUkD,QAxCnD,SAAyBC,GAEnBtC,EACFR,EAAKwB,MAAMC,kBAAkBsB,UAE7B/C,EAAKwB,MAAMC,kBAAkBuB,WAoCvB,yBACEC,IAAKC,IACLC,OAAO,OACPC,IAAI,GACJC,MAAO,CAAEC,YAAa,SAL1B,eCrFKC,UA7BG,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,eAQnB,OACE,kBAACC,EAAA,EAAD,KACG,kBAACC,EAAA,EAAD,CACDL,MAAO,CAAEF,OAAQ,QACjBQ,WAAS,EACTC,UAAU,SACVC,QAAQ,eACRC,WAAW,UALV,IATc,WAEjB,GAA6C,SAAzC1B,aAAa2B,QAAQ,gBACvB,OAAO,kBAAC,EAAD,MAYNC,GACC,kBAACC,EAAA,EAAD,CAAQC,MAAM,WAAWC,SAAS,0CAClC,kBAAC,IAAD,CAAMC,GAAI,cAAeC,UAAU,cAAcxB,QAASW,GAA1D","file":"static/js/6.3ba9eb60.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/google.8fb2bc7a.svg\";","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport withStyles from '../styles/withStyles';\nimport Typography from '../Typography';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    marginBottom: 12\n  }\n};\nvar DialogContentText = /*#__PURE__*/React.forwardRef(function DialogContentText(props, ref) {\n  return /*#__PURE__*/React.createElement(Typography, _extends({\n    component: \"p\",\n    variant: \"body1\",\n    color: \"textSecondary\",\n    ref: ref\n  }, props));\n});\nprocess.env.NODE_ENV !== \"production\" ? DialogContentText.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiDialogContentText'\n})(DialogContentText);","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogContentText,\r\n  DialogTitle\r\n} from \"@material-ui/core\";\r\nimport gIcon from \"../images/google.svg\";\r\n\r\n// your client id will be here\r\nconst clientId =\"304991981507-dtj026vui1dbrus032hksbnv8dk6m372.apps.googleusercontent.com\";\r\n\r\nconst gapi = window.gapi;\r\n// get the gapi from window\r\n\r\nconst GoogleSignIn = () => {\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  useEffect(() => {\r\n    function updateSigninStatus(isSignedIn) {\r\n      if (isSignedIn) {\r\n        console.log(\"Signed in\");\r\n        setIsSignedIn(true);\r\n        // also close the popup\r\n        setOpen(false);\r\n        loadClient();\r\n        console.log(\r\n          gapi.auth2\r\n            .getAuthInstance()\r\n            .currentUser.get()\r\n            .getAuthResponse().id_token\r\n        );\r\n      } else {\r\n        console.log(\"Signed out\");\r\n        setIsSignedIn(false);\r\n      }\r\n    }\r\n\r\n    gapi.load(\"client:auth2\", () => {\r\n      gapi.client\r\n        .init({\r\n          clientId: clientId,\r\n          scope: \"https://www.googleapis.com/auth/youtube.readonly\"\r\n        })\r\n        .then(() => {\r\n          // Listen for sign-in state changes.\r\n          gapi.auth2.getAuthInstance().isSignedIn.listen(updateSigninStatus);\r\n          // Handle the initial sign-in state.\r\n          updateSigninStatus(gapi.auth2.getAuthInstance().isSignedIn.get());\r\n        });\r\n    });\r\n\r\n    setTimeout(() => {\r\n      setOpen(true);\r\n    }, 2000);\r\n    // show popup after two seconds\r\n  }, []);\r\n\r\n  function loadClient() {\r\n    gapi.client.setApiKey(\"AIzaSyDJHo6BZNDui-YvXPhb-U0DOUFGEWsWpvw\");\r\n    return gapi.client\r\n      .load(\"https://www.googleapis.com/discovery/v1/apis/youtube/v3/rest\")\r\n      .then(\r\n        function() {\r\n          console.log(\"GAPI client loaded for API\");\r\n          gapi.client.youtube.videos\r\n            .list({\r\n              part: \"snippet\",\r\n              myRating: \"like\"\r\n            })\r\n            .then(response => {\r\n              console.log(response);\r\n            });\r\n        },\r\n        function(err) {\r\n          console.error(\"Error loading GAPI client for API\", err);\r\n        }\r\n      );\r\n  }\r\n\r\n  /**\r\n   *  Called when the signed in status changes, to update the UI\r\n   *  appropriately. After a sign-in, the API is called.\r\n   */\r\n\r\n  const [isSignedIn, setIsSignedIn] = useState(false);\r\n\r\n  /**\r\n   *  Sign in the user upon button click.\r\n   */\r\n  function handleAuthClick(event) {\r\n    // if user is currently signed in then sign it out else sign in\r\n    if (isSignedIn) {\r\n      gapi.auth2.getAuthInstance().signOut();\r\n    } else {\r\n      gapi.auth2.getAuthInstance().signIn();\r\n    }\r\n  }\r\n\r\n  /**\r\n   *  Sign out the user upon button click.\r\n   */\r\n  function handleSignoutClick(event) {\r\n    gapi.auth2.getAuthInstance().signOut();\r\n  }\r\n\r\n\r\n  function handleClose() {\r\n    // we will locally store if user dont want to sign in\r\n    localStorage.setItem(\"signInClosed\", true)\r\n    setOpen(false);\r\n  }\r\n  \r\n\r\n  return (\r\n    <div>\r\n      <Dialog open={open} onClose={handleClose}>\r\n        <DialogTitle id=\"alert-dialog-title\">\r\n          Sign In with your Google account ?\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n            After signing in you will be able to retrieve your liked songs and\r\n            like or dislike a song on your YouTube account.\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button variant=\"outlined\" onClick={handleClose} color=\"primary\">\r\n            Later\r\n          </Button>\r\n          <Button variant=\"outlined\" color=\"primary\" onClick={handleAuthClick}>\r\n            <img\r\n              src={gIcon}\r\n              height=\"25px\"\r\n              alt=\"\"\r\n              style={{ marginRight: \"8px\" }}\r\n            />\r\n            Sign In\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GoogleSignIn;\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\n// import { GlobalContext } from \"./GlobalState\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Grid } from \"@material-ui/core\";\r\nimport Banner from \"./Banner\";\r\nimport Hero from \"./Hero\";\r\nimport GoogleSignIn from \"./GoogleSignIn\";\r\n// import App2 from \"./App2\";\r\n\r\n// const bgStyle = {\r\n//   background: `url(${bgImg2}) no-repeat`,\r\n//   backgroundPositionX: \"50%\",\r\n//   width: \"100%\",\r\n//   height: \"100%\"\r\n// };\r\n\r\n\r\n\r\nconst LoginPage = ({ continueToHome }) => {\r\n  const showSignIn = () => {\r\n    // if user has already closed the popup dont show it\r\n    if (localStorage.getItem(\"signInClosed\") !== \"true\") {\r\n      return <GoogleSignIn />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Hero>\r\n       <Grid  \r\n      style={{ height: \"80vh\" }}\r\n      container\r\n      direction=\"column\"\r\n      justify=\"space-around\"\r\n      alignItems=\"center\"\r\n    > {showSignIn()}\r\n        <Banner title=\"nDsMusic\" subtitle=\"Enjoyable Music Experience Without ads\">\r\n        <Link to={\"/page1/home\"} className=\"btn-primary\" onClick={continueToHome}>\r\n          Continue\r\n        </Link>\r\n        \r\n        </Banner>\r\n    </Grid>\r\n    </Hero>\r\n   \r\n  );\r\n};\r\n \r\nexport default LoginPage;\r\n"],"sourceRoot":""}