{"version":3,"sources":["components/SearchResult.js"],"names":["entities","Entities","require","XmlEntities","liVariants","open","y","opacity","transition","stiffness","velocity","closed","ulVariants","staggerChildren","delayChildren","staggerDirection","SearchResult","videos","useCycle","isOpen","setisOpen","useContext","GlobalContext","dispatch","handleClick","video","data","id","videoId","title","decode","snippet","channelTitle","maxThumbnail","sdThumbnail","type","React","useEffect","setTimeout","console","log","renderResult","map","div","variants","key","alignItems","button","onClick","className","style","width","height","marginRight","alt","src","thumbnails","high","url","primary","secondary","component","variant","color","initial","animate"],"mappings":"mOAmBMA,EAAW,IAAIC,EAFJC,EAAQ,KAAiBC,aAIpCC,EAAa,CACjBC,KAAM,CACJC,EAAG,EACHC,QAAS,EACTC,WAAY,CACVF,EAAG,CAAEG,UAAW,IAAMC,UAAW,OAGrCC,OAAQ,CACNL,EAAG,GACHC,QAAS,EACTC,WAAY,CACVF,EAAG,CAAEG,UAAW,QAKhBG,EAAa,CACjBP,KAAM,CACJG,WAAY,CAAEK,gBAAiB,IAAMC,cAAe,KAEtDH,OAAQ,CACNH,WAAY,CAAEK,gBAAiB,IAAME,kBAAmB,KAiF7CC,UA7EM,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAAa,EACPC,aAAS,GAAO,GADT,mBAC5BC,EAD4B,KACpBC,EADoB,OAGZC,qBAAWC,KAHC,yCAGxBC,EAHwB,KAQ7BC,EAAc,SAAAC,GAJW,IAAAC,IAMN,CACrBC,GAAIF,EAAME,GAAGC,QACbC,MAAO7B,EAAS8B,OAAOL,EAAMM,QAAQF,OACrCG,aAAchC,EAAS8B,OAAOL,EAAMM,QAAQC,cAC5CC,aAAa,8BAAD,OAAgCR,EAAME,GAAGC,QAAzC,sBACZM,YAAY,8BAAD,OAAgCT,EAAME,GAAGC,QAAzC,mBAVbL,EAAS,CAAEY,KAAM,yBAA0BJ,QAASL,KAetDU,IAAMC,WAAU,WACdC,YAAW,cAAU,KACrBC,QAAQC,IAAI,eAAgBrB,GAC5BC,GAAU,KACT,IAEH,IAAMqB,EAAexB,EAAOyB,KAAI,SAAAjB,GAAU,IAChCM,EAAYN,EAAZM,QAER,OADAQ,QAAQC,IAAI,uBAEV,kBAAC,IAAOG,IAAR,CAAYC,SAAUxC,EAAYyC,IAAKpB,EAAME,GAAGC,SAC9C,kBAAC,IAAD,CACEkB,WAAW,aACXC,QAAM,EACNC,QAAS,kBAAMxB,EAAYC,KAI3B,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEwB,UAAU,cACVC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,OAAQC,YAAa,QACrDC,IAAKvB,EAAQF,MACb0B,IAAKxB,EAAQyB,WAAWC,KAAKC,OAGjC,kBAAC,IAAD,CACEC,QAAS3D,EAAS8B,OAAOC,EAAQF,OACjC+B,UACE,oCACE,kBAAC,IAAD,CACEC,UAAU,OACVC,QAAQ,QACRC,MAAM,eAELhC,EAAQC,kBAMnB,kBAAC,IAAD,UAKN,OACE,kBAAC,IAAOW,IAAR,CACEC,SAAUhC,EACVoD,SAAS,EACTC,QAAS9C,EAAS,OAAS,UAE1BsB","file":"static/js/10.fa0563b4.chunk.js","sourcesContent":["import React, { useContext } from \"react\";\r\nimport { motion, useCycle } from \"framer-motion\";\r\n// import { Link } from \"react-router-dom\";\r\n\r\nimport { GlobalContext } from \"./GlobalState\";\r\n\r\n// import youtubeSearch from \"../apis/youtubeSearch\";\r\nimport \"../style.css\";\r\nimport {\r\n  ListItem,\r\n  Typography,\r\n  ListItemAvatar,\r\n  Avatar,\r\n  Divider,\r\n  ListItemText\r\n} from \"@material-ui/core\";\r\n\r\nconst Entities = require(\"html-entities\").XmlEntities;\r\n\r\nconst entities = new Entities();\r\n\r\nconst liVariants = {\r\n  open: {\r\n    y: 0,\r\n    opacity: 1,\r\n    transition: {\r\n      y: { stiffness: 1000, velocity: -100 }\r\n    }\r\n  },\r\n  closed: {\r\n    y: 50,\r\n    opacity: 0,\r\n    transition: {\r\n      y: { stiffness: 1000 }\r\n    }\r\n  }\r\n};\r\n\r\nconst ulVariants = {\r\n  open: {\r\n    transition: { staggerChildren: 0.07, delayChildren: 0.2 }\r\n  },\r\n  closed: {\r\n    transition: { staggerChildren: 0.05, staggerDirection: -1 }\r\n  }\r\n};\r\n\r\nconst SearchResult = ({ videos }) => {\r\n  const [isOpen, setisOpen] = useCycle(false, true);\r\n\r\n  const [{}, dispatch] = useContext(GlobalContext);\r\n  const setCurrentVideoSnippet = data => {\r\n    dispatch({ type: \"setCurrentVideoSnippet\", snippet: data });\r\n  };\r\n\r\n  const handleClick = video => {\r\n    // set all the info of current clicked video in this object\r\n    setCurrentVideoSnippet({\r\n      id: video.id.videoId,\r\n      title: entities.decode(video.snippet.title),\r\n      channelTitle: entities.decode(video.snippet.channelTitle),\r\n      maxThumbnail: `https://img.youtube.com/vi/${video.id.videoId}/maxresdefault.jpg`,\r\n      sdThumbnail: `https://img.youtube.com/vi/${video.id.videoId}/sddefault.jpg`\r\n      // this is the url of the max resolution of thumbnail\r\n    });\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    setTimeout(() => {}, 100);\r\n    console.log(\"isopen cycle\", isOpen);\r\n    setisOpen(true);\r\n  }, []);\r\n\r\n  const renderResult = videos.map(video => {\r\n    const { snippet } = video;\r\n    console.log(\"render result times\");\r\n    return (\r\n      <motion.div variants={liVariants} key={video.id.videoId}>\r\n        <ListItem\r\n          alignItems=\"flex-start\"\r\n          button\r\n          onClick={() => handleClick(video)}\r\n          // component={Link}\r\n          // to={{pathname: \"/play\", search:`?id=${video.id.videoId}`}}\r\n        >\r\n          <ListItemAvatar>\r\n            <Avatar\r\n              className=\"searchThumb\"\r\n              style={{ width: \"60px\", height: \"60px\", marginRight: \"15px\" }}\r\n              alt={snippet.title}\r\n              src={snippet.thumbnails.high.url}\r\n            />\r\n          </ListItemAvatar>\r\n          <ListItemText\r\n            primary={entities.decode(snippet.title)}\r\n            secondary={\r\n              <>\r\n                <Typography\r\n                  component=\"span\"\r\n                  variant=\"body2\"\r\n                  color=\"textPrimary\"\r\n                >\r\n                  {snippet.channelTitle}\r\n                </Typography>\r\n              </>\r\n            }\r\n          />\r\n        </ListItem>\r\n        <Divider />\r\n      </motion.div>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <motion.div\r\n      variants={ulVariants}\r\n      initial={false}\r\n      animate={isOpen ? \"open\" : \"closed\"}\r\n    >\r\n      {renderResult}\r\n    </motion.div>\r\n  );\r\n};\r\n\r\nexport default SearchResult;\r\n"],"sourceRoot":""}